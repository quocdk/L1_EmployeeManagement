@page "/occupation/index"
@using DAL.Models
@inject IHttpClientFactory _httpClientFactory

<h4>
    Danh sách Nghề nghiệp
</h4>
<a class="btn btn-primary" href="occupation/create">Thêm mới</a>
<button class="btn btn-primary" @onclick="@(() => ReLoadData())">Tải lại danh sách</button>
<hr />
<div class="mb-3 row">
    <div class="col-sm-4">
        <input class="form-control" placeholder="Nhập tên muốn tìm kiếm" @bind=occupation.Name>
    </div>
    <button class="col-sm-1 btn btn-success" @onclick="@(() => Search(occupation.Name))">Tìm kiếm</button>
</div>

<br />
@if (listOccupations == null && listOccupationsSearch == null)
{
    <div class="spinner-border m-5" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tên</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (listOccupationsSearch != null)
            {
                @foreach (var occupation in listOccupationsSearch)
                {
                    <tr>
                        <td>@occupation.Name</td>
                        <td>
                            <a class="btn btn-info" href="/occupation/detail/@occupation.Id">Chi tiết</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(occupation.Id))">Xóa</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                @foreach (var occupation in listOccupations)
                {
                    <tr>
                        <td>@occupation.Name</td>
                        <td>
                            <a class="btn btn-info" href="/occupation/detail/@occupation.Id">Chi tiết</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(occupation.Id))">Xóa</button>
                        </td>
                    </tr>
                }
            }
            
        </tbody>
    </table>

}

@code {
    List<Occupation> listOccupations = null;
    List<Occupation> listOccupationsSearch = null;
    Occupation occupation = new();
    string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        await Task.Delay(1000);

        var client = _httpClientFactory.CreateClient();

        var response = await client.GetFromJsonAsync<List<Occupation>>("https://localhost:7219/api/Occupations");
        listOccupations = response;

        errorMessage = string.Empty;
    }
    async Task ReLoadData()
    {
        listOccupationsSearch = null;
    }

    async Task Delete(Guid id)
    {
        var client = _httpClientFactory.CreateClient();
        var response = await client.DeleteAsync($"https://localhost:7219/api/Occupations/{id}");

        await LoadData();
    }

    async Task Search(string name)
    {
        await Task.Delay(1000);

        listOccupationsSearch = listOccupations.Where(x => x.Name == name).ToList();
    }



}
