@* @page "/"

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" /> *@
@*@page "/"
@using DAL.Models
@inject IHttpClientFactory _httpClientFactory

<h5>
    Danh sách Employee
</h5>

@if (listEmployees == null)
{
    <h5>Loading...</h5>
}
else
{
    @foreach (var employee in listEmployees)
    {
        <p>
            @(listEmployees.IndexOf(employee) + 1) - @employee.FullName
            <button @onclick="@(() => Delete(employee.Id))">Xóa</button>
            <button @onclick="@(() => Details(employee.Id))">Chi tiết</button>
        </p>
    }
}
<p>1. Họ tên</p>
<input @bind=employee.FullName>
<p>2. Ngày sinh</p>
<input @bind=employee.DateOfBirth>
<p>3. Tuổi</p>
<input @bind=employee.Age>
<p>4. Dân tộc</p>*@
@* <input @bind=employee.Ethnic.Name>
<p>5. Nghề nghiệp</p>
<input @bind=employee.Occupation.Name>
<p>6. Căn cước công dân</p>
<input @bind=employee.CitizenIdentityCard>
<p>7. Số điện thoại</p>
<input @bind=employee.PhoneNumber>
<p>8. Địa chỉ</p>
<p>Tỉnh / Thành phố</p>
<input @bind=employee.CityId>
<p>Quận / Huyện</p>
<input @bind=employee.DistrictId>
<p>Xã / Phường</p>
<input @bind=employee.Commune.Name> *@

@*<span>@errorMessage</span>
<button @onclick="@(() => Create())">Thêm</button>
<button @onclick="@(() => Update())">Sửa</button>
<span>@errorFileMessage</span>


@code {
    List<Employee> listEmployees = null;
    Employee employee = new();
    string errorMessage = string.Empty;
    string errorFileMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    Task SetName(ChangeEventArgs e)
    {
        employee.FullName = e.Value.ToString();

        return Task.CompletedTask;
    }

    async Task LoadData()
    {
        await Task.Delay(1000);

        var client = _httpClientFactory.CreateClient();
        var response = await client.GetFromJsonAsync<List<Employee>>("https://localhost:7219/api/Employees");

        listEmployees = response;

        errorMessage = string.Empty;
        errorFileMessage = string.Empty;
    }

    async Task Delete(Guid id)
    {
        var client = _httpClientFactory.CreateClient();
        var response = await client.DeleteAsync($"https://localhost:7219/api/Employees/{id}");

        await LoadData();
    }

    async Task Create()
    {
        if (string.IsNullOrWhiteSpace(employee.FullName))
        {
            errorMessage = "Tên không được rỗng hoặc chứa toàn khoảng trắng";
        }
        else
        {
            employee.Id = Guid.NewGuid();
            var client = _httpClientFactory.CreateClient();
            var response = await client.PostAsJsonAsync<Employee>("https://localhost:7219/api/Employees", employee);

            await LoadData();
        }
    }

    async Task Details(Guid id)
    {
        var client = _httpClientFactory.CreateClient();
        var response = await client.GetFromJsonAsync<Employee>($"https://localhost:7219/api/Employees/{id}");

        employee = response;
    }

    async Task Update()
    {
        if (string.IsNullOrWhiteSpace(employee.FullName))
        {
            errorMessage = "Tên không được rỗng hoặc chứa toàn khoảng trắng";
        }
        else
        {
            var client = _httpClientFactory.CreateClient();
            var response = await client.PutAsJsonAsync<Employee>("https://localhost:7219/api/Employees", employee);

            await LoadData();

        }
    }
}
*@