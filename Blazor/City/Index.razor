@page "/city/index"
@using DAL.Models
@inject IHttpClientFactory _httpClientFactory

<h4>
    Danh sách Tỉnh / Thành phố
</h4>
<a class="btn btn-primary" href="city/create">Thêm mới</a>
<button class="btn btn-primary" @onclick="@(() => ReLoadData())">Tải lại danh sách</button>
<hr />
<div class="mb-3 row">
    <div class="me-2 col-sm-3">
        <input class="form-control" placeholder="Nhập tên muốn tìm kiếm" @bind=city.Name>
    </div>
    <button class="col-sm-1 btn btn-success" @onclick="@(() => Search(city.Name))">Tìm kiếm</button>
</div>

<br />
@if (listCities == null && listCitiesSearch == null)
{
    <div class="spinner-border m-5" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tên</th>
                <th></th>              
            </tr>
        </thead>
        <tbody>
            @if (listCitiesSearch != null)
            {
                @foreach (var city in listCitiesSearch)
                {
                    <tr>
                        <td>@city.Name</td>
                        <td>
                            <a class="btn btn-info" href="/city/detail/@city.Id">Chi tiết</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(city.Id))">Xóa</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                @foreach (var city in listCities)
                {
                    <tr>
                        <td>@city.Name</td>
                        <td>
                            <a class="btn btn-info" href="/city/detail/@city.Id">Chi tiết</a>
                            <button class="btn btn-danger" @onclick="@(() => Delete(city.Id))">Xóa</button>
                        </td>
                    </tr>
                }
            }          
        </tbody>
    </table>
    
}

@code {
    List<City> listCities = null;
    List<City> listCitiesSearch = null;
    City city = new();

    List<District> listDistricts = null;
    List<District> listDistrictsDelete = null;

    List<Commune> listCommunes = null;
    List<Commune> listCommunesDelete = null;

    string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        await Task.Delay(1000);

        var client = _httpClientFactory.CreateClient();

        var responseCommune = await client.GetFromJsonAsync<List<Commune>>("https://localhost:7219/api/Communes");
        listCommunes = responseCommune;

        var responseDistrict = await client.GetFromJsonAsync<List<District>>("https://localhost:7219/api/Districts");
        listDistricts = responseDistrict;

        var responseCity = await client.GetFromJsonAsync<List<City>>("https://localhost:7219/api/Cities");
        listCities = responseCity;
    }
    async Task ReLoadData()
    {
        listCitiesSearch = null;
    }

    async Task Delete(Guid id)
    {
        var client = _httpClientFactory.CreateClient();

        var responseDeleteCity = await client.DeleteAsync($"https://localhost:7219/api/Cities/{id}");

        listDistrictsDelete = listDistricts.Where(x => x.CityId == id).ToList();

        foreach (var district in listDistrictsDelete)
        {
            var responseDeleteDistrict = await client.DeleteAsync($"https://localhost:7219/api/Districts/{district.Id}");

            listCommunesDelete = listCommunes.Where(x => x.DistrictId == district.Id).ToList();

            foreach (var commune in listCommunesDelete)
            {
                var responseDeleteCommune = await client.DeleteAsync($"https://localhost:7219/api/Communes/{commune.Id}");
            }
        }

        await LoadData();
    }

    async Task Search(string name)
    {
        await Task.Delay(1000);
        //var client = _httpClientFactory.CreateClient();
        //var response = await client.GetFromJsonAsync<City>($"https://localhost:7219/api/Cities/{id}");
        //listCities.Clear();
        //listCities.Add(response);

        if (!string.IsNullOrEmpty(name))
        {
            listCitiesSearch = listCities.Where(x => x.Name.ToLower().Contains(name)).ToList();
        }
        //listCities.AddRange(listCitiesSearch);
    }


    
}
