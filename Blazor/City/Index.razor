@page "/city/index"
@using DAL.Models
@inject IHttpClientFactory _httpClientFactory

<h4>
    Danh sách Tỉnh / Thành phố
</h4>
<a class="btn btn-primary" href="city/create">Thêm mới</a>
<br />
@if (listCities == null)
{
    <div class="spinner-border m-5" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Tên</th>
                <th></th>              
            </tr>
        </thead>
        <tbody>
            @foreach (var city in listCities)
            {
                <tr>
                    @* <td>@(listCities.IndexOf(city) +1)</td> *@
                    <td>@city.Name</td>
                    <td>
                        <a class="btn btn-info" href="/city/detail/@city.Id">Chi tiết</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(city.Id))">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}

<span>@errorMessage</span>


@code {
    List<City> listCities = null;
    City city = new();
    string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        await Task.Delay(1000);

        var client = _httpClientFactory.CreateClient();
        var response = await client.GetFromJsonAsync<List<City>>("https://localhost:7219/api/Cities");

        listCities = response;

        errorMessage = string.Empty;
    }

    async Task Delete(Guid id)
    {
        var client = _httpClientFactory.CreateClient();
        var response = await client.DeleteAsync($"https://localhost:7219/api/Cities/{id}");

        await LoadData();
    }


    // async Task Details(Guid id)
    // {
    //     var client = _httpClientFactory.CreateClient();
    //     var response = await client.GetFromJsonAsync<City>($"https://localhost:7219/api/Cities/{id}");

    //     city = response;
    // }

    // async Task Update()
    // {
    //     if (string.IsNullOrWhiteSpace(city.Name))
    //     {
    //         errorMessage = "Tên không được rỗng hoặc chứa toàn khoảng trắng";
    //     }
    //     else
    //     {
    //         var client = _httpClientFactory.CreateClient();
    //         var response = await client.PutAsJsonAsync<City>("https://localhost:7219/api/Cities", city);

    //         await LoadData();

    //     }
    // }
}
